// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6647.FRC2019.subsystems;


import org.usfirst.frc6647.FRC2019.RobotMap;
import org.usfirst.frc6647.FRC2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DifferentialDrive driveTrain;
    private DoubleSolenoid frontPistonHab;
    private DoubleSolenoid rearPistonHab;
    private AnalogGyro gyro;
    private Encoder leftEncoder;
    private Encoder rightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Chassis() {     
        
        
        driveTrain = new DifferentialDrive(RobotMap.frontLeft, RobotMap.frontRight);
        addChild("DriveTrain",driveTrain);
        driveTrain.setSafetyEnabled(true);
        driveTrain.setExpiration(0.1);
        driveTrain.setMaxOutput(1.0);

        frontPistonHab = new DoubleSolenoid(0, RobotMap.FRONT_HAB_PISTON_ACTIVATE, RobotMap.FRONT_HAB_PISTON_DEACTIVATE);
        addChild("FrontPistonHab",frontPistonHab);
        
        
        rearPistonHab = new DoubleSolenoid(0, RobotMap.REAR_HAB_PISTON_ACTIVATE, RobotMap.REAR_HAB_PISTON_DEACTIVATE);
        addChild("RearPistonHab",rearPistonHab);
        
        
        gyro = new AnalogGyro(0);
        addChild("Gyro",gyro);
        gyro.setSensitivity(0.007);
        
        leftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("LeftEncoder",leftEncoder);
        leftEncoder.setDistancePerPulse(1.0);
        leftEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        rightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("RightEncoder",rightEncoder);
        rightEncoder.setDistancePerPulse(1.0);
        rightEncoder.setPIDSourceType(PIDSourceType.kRate);
        
    }

    @Override
    public void initDefaultCommand() {

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

}

