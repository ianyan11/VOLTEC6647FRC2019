// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6647.FRC2019.subsystems;


import org.usfirst.frc6647.FRC2019.RobotMap;
import org.usfirst.frc6647.FRC2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;


public class Lift extends PIDSubsystem {

    private WPI_TalonSRX liftMotor;
    private static double Kp = 0.001;
    private static double Ki = 0.0;
    private static double Kd = 0.0;
    private static double tolerance = 10.00;

    public Lift() {
        super("Lift", Kp, Ki, Kd);
        liftMotor = RobotMap.lift;
        setOutputRange(-1, 1);
        setAbsoluteTolerance(tolerance);
        getPIDController().setContinuous(true);
        
    }
    public void Stop_Elevador() {
	liftMotor.set(ControlMode.PercentOutput, 0.0);
	}
    public void initDefaultState() {
        Stop_Elevador();
    }
    @Override
    public void initDefaultCommand() {
        
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    @Override
    protected double returnPIDInput() {
        return liftMotor.getSelectedSensorPosition();
    }

    @Override
    protected void usePIDOutput(double output) {
        liftMotor.set(ControlMode.PercentOutput, output);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

